import random
import time

# ASCII Art Functions
def display_attack():
    print("\n ⚔️  *SLASH* ⚔️\n")
    time.sleep(1.5)

def display_spell():
    print("\n 🔥 *WHOOSH* 🔥\n")
    time.sleep(1.5)

def display_heal():
    print("\n 💖 *GLOW* 💖\n")
    time.sleep(1.5)

def display_enemy_attack():
    print("\n 💀 *BAM* 💀\n")
    time.sleep(1.5)

def display_enemy_defeated():
    print("\n ☠️  *Enemy has fallen!* ☠️\n")
    time.sleep(1.5)

# City Class with Class Attribute
class City:
    postcodes = {
        "Helsinki": "00100",
        "Turku": "20100",
        "Tampere": "33100",
        "Salo": "24100",
        "Oulu": "90100",
        "Jyväskylä": "40100"
    }
    
    def __init__(self, name: str, population: int):
        self.__name = name
        self.__population = population

# List Helper Class
class ListHelper:
    @classmethod
    def greatest_frequency(cls, my_list):
        return max(set(my_list), key=my_list.count)
    
    @classmethod
    def doubles(cls, my_list):
        return sum(1 for item in set(my_list) if my_list.count(item) > 1)

# Base Character Class
class Character:
    game_world = "Fantasy Land"
    
    def __init__(self, name, health, attack_power):
        self.name = name
        self.health = health
        self.attack_power = attack_power
        self.level = 1
        self.xp = 0
        self.inventory = []
    
    def attack(self, other):
        damage = random.randint(1, self.attack_power)
        other.health -= damage
        display_attack()
        print(f"{self.name} attacks {other.name} for {damage} damage!")
    
    def is_alive(self):
        return self.health > 0
    
    def gain_xp(self, amount):
        self.xp += amount
        if self.xp >= self.level * 10:
            self.level_up()
    
    def level_up(self):
        self.level += 1
        self.health += 10
        self.attack_power += 2
        print(f"{self.name} leveled up! Now at level {self.level}!")
    
    def use_item(self, item):
        if item in self.inventory:
            print(f"{self.name} uses {item.name}!")
            display_heal()
            item.use(self)
            self.inventory.remove(item)
        else:
            print("Item not found!")

# Warrior Class
class Warrior(Character):
    armor = 5
    
    def __init__(self, name):
        super().__init__(name, health=120, attack_power=15)

# Mage Class
class Mage(Character):
    mana = 50
    
    def __init__(self, name):
        super().__init__(name, health=80, attack_power=20)
    
    def cast_spell(self, other):
        if self.mana >= 10:
            self.mana -= 10
            spell_damage = self.attack_power + 5
            other.health -= spell_damage
            display_spell()
            print(f"{self.name} casts a fireball on {other.name} for {spell_damage} damage!")
        else:
            print(f"{self.name} is out of mana!")

# Item Class
class Item:
    def __init__(self, name, effect):
        self.name = name
        self.effect = effect
    
    def use(self, character):
        if self.effect == "heal":
            character.health += 20
            print(f"{character.name} heals for 20 health!")
        elif self.effect == "mana":
            if hasattr(character, 'mana'):
                character.mana += 15
                print(f"{character.name} recovers 15 mana!")

# Suitcase Class
class Suitcase:
    def __init__(self, max_weight):
        self.max_weight = max_weight
        self.items = []
    
    def add_item(self, item):
        total_weight = sum(i.weight for i in self.items) + item.weight
        if total_weight <= self.max_weight:
            self.items.append(item)
        else:
            print("Cannot add item. Exceeds weight limit.")

# Cargo Hold Class
class CargoHold:
    def __init__(self, max_weight):
        self.max_weight = max_weight
        self.suitcases = []
    
    def add_suitcase(self, suitcase):
        total_weight = sum(s.weight() for s in self.suitcases) + suitcase.weight()
        if total_weight <= self.max_weight:
            self.suitcases.append(suitcase)
        else:
            print("Cannot add suitcase. Exceeds weight limit.")

# Battle System
def battle(player, enemy):
    print(f"\nA wild {enemy.name} appears!")
    
    while player.is_alive() and enemy.is_alive():
        action = input(f"\nWhat will {player.name} do? (attack/spell/item): ").lower()
        
        if action == "attack":
            player.attack(enemy)
        elif action == "spell" and isinstance(player, Mage):
            player.cast_spell(enemy)
        elif action == "item":
            if player.inventory:
                item = player.inventory[0]
                player.use_item(item)
            else:
                print("No items in inventory!")
        else:
            print("Invalid action!")
        
        if enemy.is_alive():
            display_enemy_attack()
            enemy.attack(player)
        else:
            display_enemy_defeated()
            print(f"{enemy.name} has been defeated!")
            player.gain_xp(10)
        
        if not player.is_alive():
            print(f"{player.name} has been defeated! Game Over.")

# Example Game Setup
player = Mage("Gandalf")
player.inventory.append(Item("Health Potion", "heal"))
enemy = Character("Mother Fucker", 50, 8)
battle(player, enemy)
